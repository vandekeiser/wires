<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>fr.cla</groupId>
    <artifactId>wires</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <description>A Java port of the "Simulator for digital circuits" from SICP (Structure and Interpretation of Computer
        Programs)
    </description>
    <url>https://github.com/vandekeiser/wires</url>

    <modules>
        <module>wires-support</module>
        <module>wires-core</module>
        <module>wires-neuron</module>
        <module>wires-jlink</module>
    </modules>

    <properties>
        <junit.version>4.12</junit.version>
        <assertj.version>3.8.0</assertj.version>
        <mockito.version>2.8.47</mockito.version>
        <quickcheck.version>0.7</quickcheck.version>

        <maven-failsafe-surefire-plugin.version>2.22.0</maven-failsafe-surefire-plugin.version>
        <maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>
        <maven-source-plugin.version>3.0.1</maven-source-plugin.version>
        <maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>
        <maven-exec-plugin.version>1.6.0</maven-exec-plugin.version>
        <maven-jlink-plugin.version>3.0.0-alpha-1</maven-jlink-plugin.version>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${maven-exec-plugin.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <executable>${JAVA_HOME}/bin/java</executable>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!--Both maven-surefire-plugin and maven-failsafe-plugin belong to the Maven Surefire project.-->
            <!--The reason that there are those two different plugins is,
            that the maven-failsafe-plugin does not fail the build immediately
            so the post-integration-test phase will run in any case.
            Only the verify phase fails the build on test failures.-->

            <!--Runs unit tests and binds to the test phase by default-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-failsafe-surefire-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jlink-plugin</artifactId>
                <version>${maven-jlink-plugin.version}</version>
                <extensions>true</extensions>
                <configuration>
                    <!-- configuration elements goes here -->
                </configuration>
            </plugin>

            <!--Runs integration tests and binds to the integration-test and verify phases by default-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-surefire-plugin.version}</version>
            </plugin>

            <!--Create a jar artifact for the tests too.-->
            <!--This is useful if you want to have a child project where tests reuse test classes-->
            <!-- of this parent project.-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source-plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--Configure javac-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <!--<compilerArgs>-->
                        <!--<arg>-verbose</arg>-->
                    <!--</compilerArgs>-->
                    <compilerArguments>
                        <Werror/>
                    </compilerArguments>
                    <!--The "missing serialVersionUID" warning is useless in this project,
                    as in all projects that dont need a serialization compatibility policy
                    more advanced than the default one (see Effective Java).-->
                    <!--With this mvn clean install fails-->
                    <compilerArgument>-Xlint:all,-serial</compilerArgument>
                    <!--With this mvn clean install passes-->
                    <!--<compilerArgument>-Xlint:all,-serial,-exports</compilerArgument>-->
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>

                    <!--With JAVA_HOME=Java 10.0.2, this produces:-->
                    <!--"[WARNING] bootstrap class path not set in conjunction with -source 9"-->
                    <!--With JAVA_HOME=Java 9.0.4, this produces:-->
                    <!--"[WARNING] /G:/projets/wires/wires/wires/wires-core/src/test/java/fr/cla/wires/core/MavenVsJavaModulesReproduceTest.java:[9,54]
                    class fr.cla.wires.support.oo.ddd.AbstractValueObjectTest in module  is not exported"-->
                    <source>9</source>
                    <target>9</target>

                    <!--IJ doesn't seem to like release 10-->
                    <!--<release>9</release>-->
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.pholser</groupId>
            <artifactId>junit-quickcheck-core</artifactId>
            <version>${quickcheck.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.pholser</groupId>
            <artifactId>junit-quickcheck-generators</artifactId>
            <version>${quickcheck.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

</project>
