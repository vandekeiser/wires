same--------------
javac "G:\projets\wires\wires\wires\clientmod\src\test\java\client\test\DerivedTest.java" \
-d "G:\projets\wires\wires\wires\clientmod\target\test-classes" \
-classpath "G:\projets\wires\wires\wires\clientmod\target\test-classes;" \
--module-path "G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT-tests.jar;G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT.jar;" \
-sourcepath "G:\projets\wires\wires\wires\clientmod\src\test\java;" \
--release 9 \
-Xlint:all \
--patch-module clientmod="G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\clientmod\src\test\java;"


****************reproduit le pb:
javac "G:\projets\wires\wires\wires\clientmod\src\test\java\client\test\DerivedTest.java" \
-d "G:\projets\wires\wires\wires\clientmod\target\test-classes" \
-classpath "G:\projets\wires\wires\wires\clientmod\target\test-classes;" \
--module-path "G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT-tests.jar;G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT.jar;" \
-sourcepath "G:\projets\wires\wires\wires\clientmod\src\test\java;" \
--release 9 \
-Xlint:all \
--patch-module clientmod="G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\clientmod\src\test\java;" \
--add-reads apimod=ALL-UNNAMED \
--add-reads clientmod=ALL-UNNAMED \
--add-exports apimod/api=ALL-UNNAMED \
--add-exports clientmod/client=ALL-UNNAMED \
--add-modules apimod

////////////////////////////tentative --upgrade-module: javac: invalid flag: --upgrade-module
javac "G:\projets\wires\wires\wires\clientmod\src\test\java\client\test\DerivedTest.java" \
-d "G:\projets\wires\wires\wires\clientmod\target\test-classes" \
-classpath "G:\projets\wires\wires\wires\clientmod\target\test-classes;" \
--module-path "G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT-tests.jar;G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT.jar;" \
-sourcepath "G:\projets\wires\wires\wires\clientmod\src\test\java;" \
--release 9 \
-Xlint:all \
--patch-module clientmod="G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\clientmod\src\test\java;" \
--upgrade-module clientmod="G:\projets\wires\wires\wires\apimod\target\classes;" \
--add-reads apimod=ALL-UNNAMED \
--add-reads clientmod=ALL-UNNAMED \
--add-exports apimod/api=ALL-UNNAMED \
--add-exports clientmod/client=ALL-UNNAMED \
--add-modules apimod

***not there??
--illegal-access=warn
--permit-illegal-access


*****************analyse reponse user944849*****************
i already thought about that and renamed all packages so that there are no split packages,
    so it can't be that

*****************analyse reponse khmarbaise*****************
"The problem seemed to be that you want to create a test-jar
    in a module which does not contain code in src/test/java ...
If you like to have a module which is only a test module
    than put those code into default directory src/main/java
    and define a dependency on that module with scope test...
Furthermore you should not define the execution to create a test jar
    within the parent which results in execution that in each child
    which is usually not what you want...
Created a PR to your project you can take a look."
-->
1. I trclasse G:\projets\wires\wires\wires\apimod\src\test\java\api\foo\ff.java
   qui etait le dernier dir vide:
   change rien
2. le reste:
Thanks for creating a branch. But it passes only because you removed the clientmod -> apimod test dependancy in clientmod's mod.
Yes that dependency was unused, but only because I wanted to minimize the number of files in the problem reduction branch.
   on la remet: ca fail


*****************analyse reponse Till Brychcy*****************
Thanks for your detailed answer, which is essentially that "It looks like maven doesn't support this use case yet"
-->So let's try to reproduce the issue without maven. I created branch TRY_ADAPT_khmarbaise-MINIMIZE_ISSUE for these trials (sorry for the confusing branch name).

1. Adapting my former command line which is logged by maven, that is:
javac "G:\projets\wires\wires\wires\clientmod\src\test\java\client\test\DerivedTest.java" \
-d "G:\projets\wires\wires\wires\clientmod\target\test-classes" \
-classpath "G:\projets\wires\wires\wires\clientmod\target\test-classes;" \
--module-path "G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT-tests.jar;G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT.jar;" \
-sourcepath "G:\projets\wires\wires\wires\clientmod\src\test\java;" \
--release 9 \
-Xlint:all \
--patch-module clientmod="G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\clientmod\src\test\java;" \
--add-reads apimod=ALL-UNNAMED \
--add-reads clientmod=ALL-UNNAMED \
--add-exports apimod/api=ALL-UNNAMED \
--add-exports clientmod/client=ALL-UNNAMED \
--add-modules apimod

javac "G:\projets\wires\wires\wires\clientmod\src\test\java\client\test\DerivedTest.java"
-d "G:\projets\wires\wires\wires\clientmod\target\test-classes"
-classpath "G:\projets\wires\wires\wires\clientmod\target\test-classes;"
--module-path "G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT-tests.jar;G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT.jar;"
-sourcepath "G:\projets\wires\wires\wires\clientmod\src\test\java;"
--release 9
-Xlint:all
--patch-module clientmod="G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\clientmod\src\test\java;"
--add-reads apimod=ALL-UNNAMED
--add-reads clientmod=ALL-UNNAMED
--add-exports apimod/api=ALL-UNNAMED
--add-exports clientmod/client=ALL-UNNAMED
--add-modules apimod

2. I remove G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT-tests.jar; from --module-path

3. I add the same to --patch-module clientmod, giving me:
    javac "G:\projets\wires\wires\wires\clientmod\src\test\java\client\test\DerivedTest.java" \
    -d "G:\projets\wires\wires\wires\clientmod\target\test-classes" \
    -classpath "G:\projets\wires\wires\wires\clientmod\target\test-classes;" \
    --module-path "G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT.jar;" \
    -sourcepath "G:\projets\wires\wires\wires\clientmod\src\test\java;" \
    --release 9 \
    -Xlint:all \
    --patch-module clientmod="G:\projets\wires\wires\wires\clientmod\target\classes;G:\projets\wires\wires\wires\clientmod\src\test\java;G:\projets\wires\wires\wires\apimod\target\apimod-1.0-SNAPSHOT-tests.jar;" \
    --add-reads apimod=ALL-UNNAMED \
    --add-reads clientmod=ALL-UNNAMED \
    --add-exports apimod/api=ALL-UNNAMED \
    --add-exports clientmod/client=ALL-UNNAMED \
    --add-modules apimod
-->OK!
So your hypothesis that maven-compiler-plugin, or maven, doesn't support this yet seems validated.
Though I think it is supposed to in the version I use, which is the latest. I wonder where to start to check that.

So I tried configuring maven-compiler-plugin explicitly but to no avail.
The general structure is I tried is (maven-compiler-plugin.version = 3.7.0):
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>${maven-compiler-plugin.version}</version>
    <configuration>
        <source>${java.version}</source>
        <target>${java.version}</target>
        <release>${java.version}</release>
        <compilerArgs>
            [...]
        </compilerArgs>
    </configuration>
</plugin>

I tried the following compilerArgs (corresponding mvn clean install errors in xml comments):

1:
<!--1. Syntaxically OK, but:-->
<!--[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.7.0:compile (default-compile) on project apimod: Compilation failure: Compilation failure:-->
<!--[ERROR] /G:/projets/wires/wires/wires/apimod/src/main/java/api/Base.java:[1,1]-->
<!--file should be on source path, or on patch path for module-->
<!--[ERROR] /G:/projets/wires/wires/wires/apimod/src/main/java/module-info.java:[1,1]-->
<!--file should be on source path, or on patch path for module-->
<compilerArgs>
    <arg>--class-path=/G/projets/wires/wires/wires/clientmod/target/test-classes;</arg>
    <arg>
        --module-path=/G/projets/wires/wires/wires/clientmod/target/classes;/G/projets/wires/wires/wires/apimod/target/apimod-1.0-SNAPSHOT.jar;
    </arg>
    <arg>--source-path=/G/projets/wires/wires/wires/clientmod/src/test/java;</arg>
    <arg>-Xlint:all</arg>
    <arg>
        --patch-module=clientmod=/G/projets/wires/wires/wires/clientmod/target/classes;/G/projets/wires/wires/wires/clientmod/src/test/java;/G/projets/wires/wires/wires/apimod/target/apimod-1.0-SNAPSHOT-tests.jar;
    </arg>
    <arg>--add-reads=apimod=ALL-UNNAMED</arg>
    <arg>--add-reads=clientmod=ALL-UNNAMED</arg>
    <arg>--add-exports=apimod/api=ALL-UNNAMED</arg>
    <arg>--add-exports=clientmod/client=ALL-UNNAMED</arg>
    <arg>--add-modules=apimod</arg>
</compilerArgs>

2:
<!--2.-->
<!--[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.-->
<!--[ERROR] There was an error in the forked process-->
<!--[ERROR] api/foo/BaseTest (wrong name: apimod/api/foo/BaseTest)-->
<!--[ERROR] org.apache.maven.surefire.booter.SurefireBooterForkException: There was an error in the forked process-->
<!--[ERROR] api/foo/BaseTest (wrong name: apimod/api/foo/BaseTest)-->
<!--[ERROR]         at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:673)-->
<compilerArgs>
    <arg>--module-source-path=./*/src/main/java;./*/src/test/java/;</arg>
    <arg>
        --source-path=/G/projets/wires/wires/wires/apimod/src/main/java;/G/projets/wires/wires/wires/apimod/src/test/java;/G/projets/wires/wires/wires/clientmod/src/test/java;/G/projets/wires/wires/wires/clientmod/src/main/java;
    </arg>
    <arg>-Xlint:all</arg>
    <arg>
        --patch-module=clientmod=/G/projets/wires/wires/wires/clientmod/target/classes;/G/projets/wires/wires/wires/clientmod/src/test/java;/G/projets/wires/wires/wires/apimod/target/apimod-1.0-SNAPSHOT.jar;/G/projets/wires/wires/wires/apimod/target/apimod-1.0-SNAPSHOT-tests.jar;
    </arg>
    <arg>--add-reads=apimod=ALL-UNNAMED</arg>
    <arg>--add-reads=clientmod=ALL-UNNAMED</arg>
    <arg>--add-exports=apimod/api=ALL-UNNAMED</arg>
    <arg>--add-exports=clientmod/client=ALL-UNNAMED</arg>
    <arg>--add-modules=apimod</arg>
</compilerArgs>

****essai parametrage explicite maven pr utiliser --patch-module
-jvm.config: KO car pr java pas javac
-arg: KO



javac -d G:\projets\wires\wires\wires\apimod\target\classes -classpath G:\projets\wires\wires\wires\apimod\target\classes; -sourcepath G:\projets\wires\wires\wires\apimod\src\main\java;G:\projets\wires\wires\wires\apimod\target\generated-sources\annotations; -s G:\projets\wires\wires\wires\apimod\target\generated-sources\annotations -g -nowarn -target 9 -source 9 --class-path=/G/projets/wires/wires/wires/clientmod/target/test-classes; --module-path=/G/projets/wires/wires/wires/clientmod/target/classes;/G/projets/wires/wires/wires/apimod/target/apimod-1.0-SNAPSHOT.jar; --source-path=/G/projets/wires/wires/wires/clientmod/src/test/java; -Xlint:all --patch-module=clientmod=/G/projets/wires/wires/wires/clientmod/target/classes;/G/projets/wires/wires/wires/clientmod/src/test/java;/G/projets/wires/wires/wires/apimod/target/apimod-1.0-SNAPSHOT.jar;/G/projets/wires/wires/wires/apimod/target/apimod-1.0-SNAPSHOT-tests.jar; --add-reads=apimod=ALL-UNNAMED --add-reads=clientmod=ALL-UNNAMED --add-exports=apimod/api=ALL-UNNAMED --add-exports=clientmod/client=ALL-UNNAMED --add-modules=apimod


-vf contenu du jar ok, sinon fixer la lmigne de cmd puis mvn
-debugger surefire pr voir pqoi il prend le module comme un noù de pkg


Caused by: java.lang.NoClassDefFoundError: api/foo/BaseTest (wrong name: apimod/api/foo/BaseTest)
    at java.lang.ClassLoader.defineClass1 (Native Method)
    at java.lang.ClassLoader.defineClass (ClassLoader.java:1007)
    at java.security.SecureClassLoader.defineClass (SecureClassLoader.java:174)
    at java.net.URLClassLoader.defineClass (URLClassLoader.java:545)
    at java.net.URLClassLoader.access$100 (URLClassLoader.java:83)
    at java.net.URLClassLoader$1.run (URLClassLoader.java:453)
    at java.net.URLClassLoader$1.run (URLClassLoader.java:447)
    at java.security.AccessController.doPrivileged (Native Method)
    at java.net.URLClassLoader.findClass (URLClassLoader.java:446)
    at java.lang.ClassLoader.loadClass (ClassLoader.java:563)
    at java.lang.ClassLoader.loadClass (ClassLoader.java:496)
    at org.apache.maven.surefire.booter.IsolatedClassLoader.loadClass (IsolatedClassLoader.java:100)
    at org.apache.maven.surefire.util.DefaultScanResult.loadClass (DefaultScanResult.java:136)
    at org.apache.maven.surefire.util.DefaultScanResult.applyFilter (DefaultScanResult.java:100)
    at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.scanClasspath (JUnitPlatformProvider.java:129)
    at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke (JUnitPlatformProvider.java:117)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:564)
    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2 (ReflectionUtils.java:206)
    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke (ProviderFactory.java:161)
    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider (ProviderFactory.java:84)
    at org.apache.maven.plugin.surefire.InPluginVMSurefireStarter.runSuitesInProcess (InPluginVMSurefireStarter.java:87)
    at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider (AbstractSurefireMojo.java:1177)
    at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked (AbstractSurefireMojo.java:1022)
    at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute (AbstractSurefireMojo.java:868)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:564)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)



 Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.22.0:test failed:
  A required class was missing while executing org.apache.maven.plugins:maven-surefire-plugin:2.22.0:test:
  org/junit/runner/notification/RunNotifier


EBUG] Forking command line:
cmd.exe /X /C ""C:\Program Files\Java\jdk-9.0.4\bin\java" --add-modules junit --module-path target/classes;C:\Users\User\.m2\repository\junit\junit\4.12\junit-4.12.jar; --patch-module clientmod=target/test-classes --add-reads clientmod=junit --add-opens clientmod/client=junit -jar C:\Users\User\AppData\Local\Temp\surefire13841552934837929929\surefirebooter4496717745192310047.jar C:\Users\User\AppData\Local\Temp\surefire13841552934837929929 2018-07-08T16-14-15_942-jvmRun1 surefire12247060966080945834tmp surefire_114125959905928207058tmp"
-->
java --add-modules junit --module-path "target/classes;C:\Users\User\.m2\repository\junit\junit\4.12\junit-4.12.jar;" --patch-module clientmod=target/test-classes --add-reads clientmod=junit --add-opens clientmod/client=junit -jar "C:\Users\User\AppData\Local\Temp\surefire13841552934837929929\surefirebooter4496717745192310047.jar" C:\Users\User\AppData\Local\Temp\surefire13841552934837929929 2018-07-08T16-14-15_942-jvmRun1 surefire12247060966080945834tmp surefire_114125959905928207058tmp


 Caused by: java.lang.NoClassDefFoundError: client/test/DerivedTest (wrong name: clientmod/client/test/DerivedTest)
[ERROR]         at java.base/java.lang.ClassLoader.defineClass1(Native Method)
[ERROR]         at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1007)
[ERROR]         at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174)
[ERROR]         at java.base/java.net.URLClassLoader.defineClass(URLClassLoader.java:545)
[ERROR]         at java.base/java.net.URLClassLoader.access$100(URLClassLoader.java:83)
[ERROR]         at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:453)
[ERROR]         at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:447)
[ERROR]         at java.base/java.security.AccessController.doPrivileged(Native Method)
[ERROR]         at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:446)
[ERROR]         at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:563)
[ERROR]         at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)
[ERROR]         at org.apache.maven.surefire.booter.IsolatedClassLoader.loadClass(IsolatedClassLoader.java:100)
    -->clientmod.client.test.DerivedTest
[ERROR]         at org.apache.maven.surefire.util.DefaultScanResult.loadClass(DefaultScanResult.java:136)
    -->clientmod.client.test.DerivedTest
[ERROR]         at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:100)
[ERROR]         at org.apache.maven.surefire.junit4.JUnit4Provider.scanClassPath(JUnit4Provider.java:309)
    -->final TestsToRun scannedClasses = scanResult.applyFilter( jUnit4TestChecker, testClassLoader );
    -->scanResult.classes == clientmod.client.test.DerivedTest
[ERROR]         at org.apache.maven.surefire.junit4.JUnit4Provider.setTestsToRun(JUnit4Provider.java:189)
[ERROR]         at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:132)
[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[ERROR]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[ERROR]         at java.base/java.lang.reflect.Method.invoke(Method.java:564)
[ERROR]         at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(ReflectionUtils.java:206)
[ERROR]         at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:161)
[ERROR]         at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:84)
[ERROR]         at org.apache.maven.plugin.surefire.InPluginVMSurefireStarter.runSuitesInProcess(InPluginVMSurefireStarter.java:87)
[ERROR]         ... 25 more

JUnit4Provider::new(
    ProviderParameters bootParams
    =
    class org.apache.maven.surefire.booter.BaseProviderFactory
)

-->

BaseProviderFactory::getScanResult
     -->return DefaultScanResult.from( providerProperties );
     -->providerProperties == "tc.0" -> "clientmod.client.test.DerivedTest"

BaseProviderFactory::setProviderProperties
    -->"tc.0" -> "clientmod.client.test.DerivedTest"
    -->D'OU?

"main@1" prio=5 tid=0x1 nid=NA runnable
  java.lang.Thread.State: RUNNABLE
	  at org.apache.maven.surefire.booter.BaseProviderFactory.setProviderProperties(BaseProviderFactory.java:183)
	  at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	  at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	  at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	  at java.lang.reflect.Method.invoke(Method.java:564)
	  at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	  at org.apache.maven.surefire.util.ReflectionUtils.invokeSetter(ReflectionUtils.java:182)
	  at org.apache.maven.surefire.util.ReflectionUtils.invokeSetter(ReflectionUtils.java:177)
	  at org.apache.maven.surefire.booter.SurefireReflector.setProviderProperties(SurefireReflector.java:354)
	  at org.apache.maven.surefire.booter.SurefireReflector.setProviderPropertiesAware(SurefireReflector.java:348)
	  at org.apache.maven.surefire.booter.ProviderFactory.createProvider(ProviderFactory.java:104)
	  at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:83)
	  at org.apache.maven.plugin.surefire.InPluginVMSurefireStarter.runSuitesInProcess(InPluginVMSurefireStarter.java:87)
	  at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1177)
	  at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:1022)
	  at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:868)
	  at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
	  at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	  at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:154)
	  at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:146)
	  at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)
	  at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)
	  at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)
	  at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	  at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)
	  at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)
	  at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)
	  at org.apache.maven.cli.MavenCli.execute(MavenCli.java:954)
	  at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	  at org.apache.maven.cli.MavenCli.main(MavenCli.java:192)
	  at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	  at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	  at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	  at java.lang.reflect.Method.invoke(Method.java:564)
	  at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	  at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	  at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	  at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)


SurefireReflector::setProviderPropertiesAware
    -->Map<String, String> properties = "tc.0" -> "clientmod.client.test.DerivedTest"


-->essayer de forcer le name?
    Map.of("tc.0", "client.test.DerivedTest")


DefaultScanResult::applyFilter
    loadClass( testClassLoader, "clientmod/client.test.DerivedTest" );

DefaultScanResult::loadClass
    classLoader.loadClass( className )
    ClassLoaders.appClassLoader().loadClass("java.lang.Object")
        OK
    ClassLoaders.appClassLoader().loadClass("java.base/java.lang.Object")
        KO
    ClassLoaders.appClassLoader().loadClass("api.Base")
    ClassLoaders.appClassLoader().loadClass("baz.BaseTest")
    ClassLoaders.appClassLoader().loadClass("client.Derived")
    ClassLoaders.appClassLoader().loadClass("client.test.DerivedTest")
    ClassLoaders.appClassLoader().loadClass("apimod/api.Base")
    ClassLoaders.appClassLoader().loadClass("apimod/baz.BaseTest")
    ClassLoaders.appClassLoader().loadClass("clientmod/client.Derived")
    ClassLoaders.appClassLoader().loadClass("clientmod/client.test.DerivedTest")
        CNFE

Comparaison lancement JUnit ds IJ:
     class jdk.internal.loader.ClassLoaders$AppClassLoader
     client.test.DerivedTest
